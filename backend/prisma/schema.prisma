generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique @db.VarChar(50)
  passwordHash    String          @map("password_hash") @db.VarChar(255)
  fullName        String          @map("full_name") @db.VarChar(100)
  email           String?         @unique @db.VarChar(100)
  role            UserRole        @default(user)
  isActive        Boolean         @default(true) @map("is_active")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  lastLogin       DateTime?       @map("last_login")
  notifications   Notification[]
  comments        TicketComment[]
  assignedTickets Ticket[]        @relation("AssignedTo")

  @@map("users")
}

model Ticket {
  id                 Int                @id @default(autoincrement())
  ticketId           String             @unique @map("ticket_id") @db.VarChar(20)
  problemType        String             @map("problem_type") @db.VarChar(50)
  otherProblemType   String?            @map("other_problem_type") @db.VarChar(100)
  problemDescription String             @map("problem_description")
  fullName           String             @map("full_name") @db.VarChar(100)
  phoneNumber        String             @map("phone_number") @db.VarChar(15)
  department         String             @db.VarChar(10)
  division           String             @db.VarChar(100)
  assetNumber        String?            @map("asset_number") @db.VarChar(50)
  status             String             @default("รอดำเนินการ") @db.VarChar(30)
  priority           String             @default("ปกติ") @db.VarChar(20)
  assignedToId       Int?               @map("assigned_to")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  resolvedAt         DateTime?          @map("resolved_at")
  clientIp           String?            @map("client_ip") @db.VarChar(45)
  notifications      Notification[]
  attachments        TicketAttachment[]
  comments           TicketComment[]
  assignedTo         User?              @relation("AssignedTo", fields: [assignedToId], references: [id])

  @@index([status])
  @@index([assignedToId])
  @@index([createdAt])
  @@map("tickets")
}

model TicketComment {
  id          Int         @id @default(autoincrement())
  ticketId    Int         @map("ticket_id")
  userId      Int?        @map("user_id")
  comment     String
  commentType CommentType @default(comment) @map("comment_type")
  isInternal  Boolean     @default(false) @map("is_internal")
  createdAt   DateTime    @default(now()) @map("created_at")
  ticket      Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@map("ticket_comments")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  ticketId  Int      @map("ticket_id")
  title     String   @db.VarChar(200)
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

model TicketAttachment {
  id               Int      @id @default(autoincrement())
  ticketId         Int      @map("ticket_id")
  filename         String   @db.VarChar(255)
  originalFilename String   @map("original_filename") @db.VarChar(255)
  mimetype         String   @db.VarChar(100)
  size             Int
  filePath         String   @map("file_path")
  uploadedAt       DateTime @default(now()) @map("uploaded_at")
  ticket           Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([filename])
  @@map("ticket_attachments")
}

enum UserRole {
  admin
  support
  user
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  WAITING_INFO
  COMPLETED
  CANCELLED
}

enum TicketPriority {
  CRITICAL
  URGENT
  HIGH
  ELEVATED
  NORMAL
  LOW
  VERY_LOW
  LOWEST
}

enum CommentType {
  comment
  status_change
  assignment
}
