openapi: 3.0.0
info:
  title: DWF Helpdesk API
  description: |
    # DWF Helpdesk System API
    
    ‡∏£‡∏∞‡∏ö‡∏ö Helpdesk ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß (DWF)
    
    ## üéØ Overview
    This API provides endpoints for managing support tickets, user authentication, and administrative functions for the DWF Helpdesk System.
    
    ## üîê Authentication
    Most endpoints require JWT authentication. Include the token in the Authorization header:
    `Authorization: Bearer <your_access_token>`
    
    ## üìä Response Format
    All API responses follow this standard format:
    ```json
    {
      "success": boolean,
      "message": "string (optional)",
      "data": "object/array (optional)",
      "error": "string (optional, when success is false)"
    }
    ```
  version: 1.0.0
  contact:
    name: DWF IT Support
    email: support@dwf.go.th

servers:
  - url: http://localhost:3001/api
    description: Development Server (Local)
  - url: http://localhost:3002/api
    description: Development Server (Docker)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme

  schemas:
    # User Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: admin
        fullName:
          type: string
          example: ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        email:
          type: string
          format: email
          example: admin@dwf.go.th
        role:
          type: string
          enum: [admin, support, user]
          example: admin
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time

    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          example: admin
        password:
          type: string
          description: ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
          example: admin123

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
          description: JWT access token (expires in 1 hour)
        refreshToken:
          type: string
          description: JWT refresh token (expires in 7 days)

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token for getting new access token

    # Ticket Schemas
    Ticket:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ticketId:
          type: string
          example: TK1699234567890
        problemType:
          type: string
          example: ‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå
        problemDescription:
          type: string
          example: ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î
        fullName:
          type: string
          example: ‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ
        phoneNumber:
          type: string
          example: 0812345678
        department:
          type: string
          example: ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ
        division:
          type: string
          example: ‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        assetNumber:
          type: string
          example: DWF-PC-001
        status:
          type: string
          example: ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        priority:
          type: string
          example: ‡∏õ‡∏Å‡∏ï‡∏¥
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        assignedTo:
          type: object
          properties:
            id:
              type: integer
            fullName:
              type: string

    CreateTicketRequest:
      type: object
      required:
        - problemType
        - problemDescription
        - fullName
        - phoneNumber
        - department
      properties:
        problemType:
          type: string
          description: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤
          example: ‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå
        otherProblemType:
          type: string
          description: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏≠‡∏∑‡πà‡∏ô‡πÜ")
        problemDescription:
          type: string
          description: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
          example: ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î
        fullName:
          type: string
          description: ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
          example: ‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ
        phoneNumber:
          type: string
          description: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
          example: 0812345678
        department:
          type: string
          description: ‡∏Å‡∏≠‡∏á/‡∏Å‡∏•‡∏∏‡πà‡∏°
          example: ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ
        division:
          type: string
          description: ‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ù‡πà‡∏≤‡∏¢
          example: ‡∏ù‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        assetNumber:
          type: string
          description: ‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
          example: DWF-PC-001

    TicketResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
        ticket:
          $ref: '#/components/schemas/Ticket'

    UpdateTicketStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
          example: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        comment:
          type: string
          description: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
          example: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤

    # Dashboard Schemas
    DashboardStats:
      type: object
      properties:
        success:
          type: boolean
          example: true
        stats:
          type: object
          properties:
            total:
              type: integer
              description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tickets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              example: 150
            pending:
              type: integer
              description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tickets ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
              example: 25
            inProgress:
              type: integer
              description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tickets ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
              example: 45
            completed:
              type: integer
              description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tickets ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
              example: 80
            totalUsers:
              type: integer
              description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              example: 50

    # Category & Priority Schemas
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: ‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå
        description:
          type: string
          example: ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå

    Priority:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï
        level:
          type: integer
          example: 8
        description:
          type: string
          example: ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        sla:
          type: integer
          example: 1

    # Response Schemas
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Error message
        details:
          type: array
          items:
            type: object

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully

    Pagination:
      type: object
      properties:
        current:
          type: integer
          example: 1
        total:
          type: integer
          example: 5
        limit:
          type: integer
          example: 20
        count:
          type: integer
          example: 85

  tags:
    - name: Authentication
      description: üîê User authentication and authorization endpoints
    - name: Tickets
      description: üé´ Ticket management and tracking endpoints
    - name: Dashboard
      description: üìä Dashboard statistics and analytics endpoints
    - name: Users
      description: üë• User management endpoints
    - name: Admin
      description: üîß Administrative endpoints
    - name: System
      description: ‚öôÔ∏è System health and configuration endpoints

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ username ‡πÅ‡∏•‡∏∞ password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: ‡πÄ‡∏Å‡∏¥‡∏ô rate limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: ‡∏Ç‡∏≠ access token ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Refresh token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Refresh token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞ blacklist token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Ticket Endpoints
  /tickets:
    post:
      tags:
        - Tickets
      summary: Create new ticket
      description: ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authentication)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
          multipart/form-data:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/CreateTicketRequest'
                - type: object
                  properties:
                    attachments:
                      type: array
                      items:
                        type: string
                        format: binary
                      description: ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡πÑ‡∏ü‡∏•‡πå, 10MB ‡∏ï‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå)
      responses:
        '201':
          description: ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          description: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: ‡πÄ‡∏Å‡∏¥‡∏ô rate limit (3 tickets ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/search:
    get:
      tags:
        - Tickets
      summary: Search tickets
      description: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tickets ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡∏ï‡πâ‡∏≠‡∏á authentication)
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        - name: status
          in: query
          schema:
            type: string
          description: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ticket
        - name: priority
          in: query
          schema:
            type: string
          description: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        - name: problem_type
          in: query
          schema:
            type: string
          description: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        - name: department
          in: query
          schema:
            type: string
          description: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
        - name: date_from
          in: query
          schema:
            type: string
            format: date
          description: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        - name: date_to
          in: query
          schema:
            type: string
            format: date
          description: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
        - name: export
          in: query
          schema:
            type: string
            enum: [csv]
          description: ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV
      responses:
        '200':
          description: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
            text/csv:
              schema:
                type: string
                description: CSV file when export=csv
        '401':
          description: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/track/{ticketId}:
    get:
      tags:
        - Tickets
      summary: Track ticket status
      description: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ticket (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authentication)
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
          description: ‡∏£‡∏´‡∏±‡∏™ ticket
          example: TK1699234567890
      responses:
        '200':
          description: ‡∏û‡∏ö ticket
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  ticket:
                    $ref: '#/components/schemas/Ticket'
        '404':
          description: ‡πÑ‡∏°‡πà‡∏û‡∏ö ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/{id}/status:
    put:
      tags:
        - Tickets
      summary: Update ticket status
      description: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ticket (‡∏ï‡πâ‡∏≠‡∏á authentication, Support+)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID ‡∏Ç‡∏≠‡∏á ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketStatusRequest'
      responses:
        '200':
          description: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ‡πÑ‡∏°‡πà‡∏û‡∏ö ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/categories:
    get:
      tags:
        - Tickets
      summary: Get problem categories
      description: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      responses:
        '200':
          description: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  /tickets/priorities:
    get:
      tags:
        - Tickets
      summary: Get priority levels
      description: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      responses:
        '200':
          description: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  priorities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Priority'

  # Dashboard Endpoints
  /dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard statistics
      description: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ dashboard (Support+ only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
        '401':
          description: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dashboard/tickets:
    get:
      tags:
        - Dashboard
      summary: Get recent tickets
      description: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tickets ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dashboard (Support+ only)
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tickets ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      responses:
        '200':
          description: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tickets ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '401':
          description: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # System Endpoints
  /status:
    get:
      tags:
        - System
      summary: System status check
      description: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
      responses:
        '200':
          description: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    example: 12345
                  version:
                    type: string
                    example: 1.0.0

  /status/health:
    get:
      tags:
        - System
      summary: Detailed health check
      description: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      responses:
        '200':
          description: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: connected
                      cache:
                        type: string
                        example: active
                      websocket:
                        type: string
                        example: running